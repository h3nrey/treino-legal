name: Deploy Docker Compose to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: "us-east-1c" # Change to your region
  EC2_INSTANCE_IP: "44.212.44.146"
  SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
  REMOTE_DIR: "/home/ubuntu/api" # Deployment directory
  API_PORT: "3000" # Default port, adjust as needed
  DB_PORT: "5432"

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./treino-api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: test-thing
        run: |
          echo "Running tests..."
          mkdir cringe

  # deploy:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./treino-api

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # Create .env file from GitHub secrets
  #     - name: Create environment file
  #       run: |
  #         cat << EOF > .env
  #         DB_HOST=db
  #         DB_PORT=${{ secrets.DB_PORT }}
  #         DB_USER=${{ secrets.DB_USER }}
  #         DB_PASSWORD=${{ secrets.DB_PASSWORD }}
  #         DB_NAME=${{ secrets.DB_NAME }}
  #         API_PORT=${{ env.API_PORT }}
  #         EOF

  #     # Setup SSH
  #     - name: Configure SSH
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
  #         chmod 600 ~/.ssh/deploy_key
  #         cat >>~/.ssh/config <<END
  #         Host ec2
  #           HostName $EC2_INSTANCE_IP
  #           User ubuntu
  #           IdentityFile ~/.ssh/deploy_key
  #           StrictHostKeyChecking no
  #         END

  #     # Copy files to EC2
  #     - name: Copy files to EC2
  #       run: |
  #         rsync -avz -e "ssh -i ~/.ssh/deploy_key" \
  #           --exclude='.git' \
  #           --exclude='node_modules' \
  #           ./ ubuntu@$EC2_INSTANCE_IP:$REMOTE_DIR

  #     # Deploy with Docker Compose
  #     - name: Deploy containers
  #       run: |
  #         ssh -i ~/.ssh/deploy_key ubuntu@$EC2_INSTANCE_IP << 'ENDSSH'
  #           cd $REMOTE_DIR
  #           # Stop and remove existing containers
  #           docker-compose down || true
  #           # Pull latest images (if using remote images)
  #           docker-compose pull || true
  #           # Build and start containers
  #           docker-compose up -d --build
  #           # Clean up unused images
  #           docker image prune -f
  #         ENDSSH
