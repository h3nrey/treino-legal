generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=public"
}

model User {
  id            String          @id @default(uuid())
  username      String          @unique
  email         String          @unique
  password      String
  createadAt    DateTime        @default(now())
  UserExercises UserExercises[]
  Training      Training[]
  userTranings  UserTranings[]
}

model UserExercises {
  id         Int      @id @default(autoincrement())
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  exerciseId Int
  userId     String
}

model Exercise {
  id                Int      @id @default(autoincrement())
  name              String
  description       String
  experienceLevelId Int
  equipamentId      Int
  gripId            Int?
  createdAt         DateTime @default(now())
  tutorialUrl       String?
  thumbnailUrl      String?
  riskLevel         String

  grip                Grip?                 @relation(fields: [gripId], references: [id])
  experienceLevel     ExperienceLevel       @relation(fields: [experienceLevelId], references: [id])
  equipament          Equipament            @relation(fields: [equipamentId], references: [id])
  usedMuscles         MusclesExercises[]
  ExerciseInstruction ExerciseInstruction[]
  ExerciseTips        ExerciseTips[]
  UserExercises       UserExercises[]
  TraningExercises    TraningExercises[]
}

model ExerciseInstruction {
  exerciseId  Int
  step        Int
  description String
  imageUrl    String?
  exercise    Exercise @relation(fields: [exerciseId], references: [id])

  @@id([exerciseId, step])
}

model ExerciseTips {
  id          Int      @id @default(autoincrement())
  exerciseId  Int
  description String
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
}

model Muscle {
  id                 Int                @id @default(autoincrement())
  name               String             @unique
  technicalName      String
  description        String?
  motorAction        String
  insertion          String
  synergists         String
  antagonists        String
  relationsAsMain    MuscleRelation[]   @relation("mainMuscleRelations")
  relationsAsRelated MuscleRelation[]   @relation("relatedMuscleRelations")
  imageUrl           String?
  exercises          MusclesExercises[]

  @@index([name, technicalName])
}

model MuscleRelation {
  id              Int          @id @default(autoincrement())
  muscleId        Int
  relatedMuscleId Int
  relationType    RelationType
  muscle          Muscle       @relation("mainMuscleRelations", fields: [muscleId], references: [id])
  relatedMuscle   Muscle       @relation("relatedMuscleRelations", fields: [relatedMuscleId], references: [id])

  @@unique([muscleId, relatedMuscleId, relationType])
}

model Training {
  id               Int                 @id @default(autoincrement())
  user             User                @relation(fields: [userId], references: [id])
  title            String
  description      String
  isPublic         Boolean
  type             TrainingType
  duration         Int                 @default(0)
  experienceLevel  ExperienceLevelEnum
  TraningExercises TraningExercises[]
  userId           String
  userTranings     UserTranings[]
}

model TraningExercises {
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  training   Training @relation(fields: [trainingId], references: [id])
  exerciseId Int
  trainingId Int

  @@id([exerciseId, trainingId])
}

enum TrainingType {
  HIPERTROPHY
  RESITANCE
  CARDIO
  STREGTH
}

enum RelationType {
  SYNERGIST
  ANTAGONIST
  STABILIZER
}

enum ExperienceLevelEnum {
  BEGGINER
  INTERMEDIARY
  ADVANCED
  ATHLETE
}

model UserTranings {
  user       User     @relation(fields: [userId], references: [id])
  training   Training @relation(fields: [trainingId], references: [id])
  userId     String
  trainingId Int

  @@id([userId, trainingId])
}

model ExperienceLevel {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  Exercise Exercise[]
}

model Grip {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  Exercise Exercise[]
}

model Equipament {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  imageUrl    String?
  Exercise    Exercise[]
}

model MusclesExercises {
  id         Int     @id @default(autoincrement())
  muscleId   Int
  exerciseId Int
  isPrimary  Boolean @default(false)

  muscle   Muscle   @relation(fields: [muscleId], references: [id])
  exercise Exercise @relation(fields: [exerciseId], references: [id])
}
